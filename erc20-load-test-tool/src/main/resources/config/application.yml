workload:
  batch-size: 10 # Request size of batched transactions
  transactions: 1_000 # total transactions per sender
  concurrency: 5 # No. of sender accounts, also concurrency
  progress-interval: 5s # interval for updating progress in web UI

web3j:
  ethClient:
    correlate: true # sets correlation id
    protocol: http # supports grpc, http, https
    host: localhost # IP of the ethereum client Node
    port: 8545 # port number (50505 - gRPC, 8545 - ethRPC)
    chain-id: 5000 # To enable EIP-155, use the chain id of the network that your Ethereum client is connected.
  receipt:
    attempts: 0 # maximum number of polling attempts to get receipt
    interval: 1000 # sleep interval (ms) between polling attempts
    defer: false # set true for queued polling of transaction receipt
    check-write-tx-failed: true # check for transaction receipt only during write transaction failure
    retry-write-tx-sleep: 5 # sleep time in seconds when polling for failed write tx (exponential backoff)
    no-write-tx-retry: 5 # number of retries for polling receipt of write tx failure
  manage-nonce: true # Managing nonce would avoid the overhead of calling eth_getTransactionCount.
  log-level: NONE # NONE, BASIC, HEADERS, BODY
  okhttp-read-timeout: 20 # read timeout in seconds

token:
  name: SecureToken
  symbol: STK
  initial-supply: 2 # total tokens minted (value is internally multiplied by 10^18)
  contract-address: # specify address (without 0x) to use an already deployed token
  deployer-private-key: c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3 # private key of the deployer account
  recipient: 45412868cB693e231DfD4ABCCA29D9001801d062 # recipient account
  amount: 5 # amount of tokens transferred in one transaction

permissioning:
    enable: false # give read-write permission to sender
    contract-address:  # permissioning contract address (without 0x in starting)
    super-admins:
      - 5094f257d3462083bcbc02c61d98c038cfa71cdd497834c5f38cd75010ddb7a5
      - 78785c4ab4ba44b83509296af86af56ff00db79ba26a292d0556a4b4e8cea87c
      - 417fbb670417375f2916a4b0110dc7d68d81ea15aad3e6eb69f166b5bed6503f
      - 9112ecbfc0a7c1fd7fdad5679dccec3b85b4ab32fe4268fe11f38cf8e5f44c39

database:
  url: # postgres database url (Ex: jdbc:postgresql://127.0.0.1:5432/postgres)
  username: postgres # postgres database username
  password: postgres # postgres database password

management:
  endpoints:
    web:
      exposure:
        include: info, health, env, metrics, prometheus
  metrics:
    tags:
      target: ${web3j.eth-client.host}:${web3j.eth-client.port}
      dapp: port-${server.port}
    export:
      prometheus:
        enabled: true
      wavefront:
        enabled: false
        uri: proxy://localhost:2878
        source:
        global-prefix: ethereum.erc20
        step: 10s
    web:
      server:
        request:
          autotime:
            enabled: false

logging:
  pattern:
    file: "%d %-5level [%thread] %logger : %msg%n"
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{0} - %msg%n"
  file:
    name: output/logs/app-${server.port}.log
  level:
    com:
      vmware: info
    org:
      web3j:
        evm: warn
    io:
      micrometer:
        influx: info
      grpc: error
  logback:
    rollingpolicy:
      max-file-size: 1GB
      max-history: 10
      file-name-pattern: ${LOG_FILE}.%d{yyyy-MM}.%i.gz

server:
  port: 8080 # web UI port for tracking progress
